#include <iostream>
#include <thread>
#include <vector>
#include <queue>
using namespace std;

struct node
{
    int id;
    int data;
    node()
    {
        data = 0;
    }
};

struct edge
{
    int id1, id2;
    int dist;
};

template <class T>
void swap1(T& t1, T& t2)
{
    T temp = t1;
    t1 = t2;
    t2 = temp;
    return;
}

void sort(vector <edge>& e)
{
    int n = e.size();
    for (int i = 0; i < n; i++)
        for (int j = 1; j < n - i; j++)
        {
            if (e[j].id1 < e[j - 1].id1) swap1(e[j], e[j - 1]);
            else if (e[j].id1 == e[j - 1].id1)
            {
                if (e[j].id2 < e[j - 1].id2) swap1(e[j], e[j - 1]);
                else if (e[j].id2 == e[j - 1].id2 && e[j].dist < e[j - 1].dist) swap1(e[j], e[j - 1]);
            }
        }
    return;
}

bool collide(vector <vector<int>> n1, vector <vector<int>> n2)
{
    for (int i = 0; i < n1.size(); i++) if (n1[i][0] != -1 && n2[i][0] != -1) return (true);
    return false;
}

class graph
{
protected:
    vector <node> n;
    vector <edge> e;
    int nc;
    int ec;

public:

    graph()
    {
        n = {};
        e = {};
        nc = ec = 0;
    }

    vector <edge> get_e() { return e; }

    vector <node> get_n() { return n; }

    int get_nc() { return nc; }

    int get_ec() { return ec; }

    void display()
    {
        cout << "Number of nodes : " << nc << endl;;
        for (int i = 0; i < nc; i++) cout << n[i].data << ' ';
        cout << endl;
        cout << "Number of edges : " << ec << endl;
        for (int i = 0; i < ec; i++) cout << e[i].id1 << ' ' << e[i].id2 << ' ' << e[i].dist << '\n';
        return;
    }

    void add_node()
    {
        node temp; cin >> temp.data;
        n.push_back(temp); nc++;
        return;
    }

    void add_edge()
    {
        edge temp;
        cin >> temp.id1 >> temp.id2 >> temp.dist;
        e.push_back(temp); ec++;
    }

};

class BFS: public graph
{
    vector <vector <int>> n1;
    vector <vector <int>> n2;                                                        //accessed by thread
    vector <edge> e;

public:

    BFS (graph g1)
    { 
        this->nc = g1.get_nc();
        this->ec = g1.get_ec();
        this->e = g1.get_e();
        this->n = g1.get_n();

        for (int i = 0; i < nc; i++) { n1.push_back({ -1 }); n2.push_back({ -1 }); }
        sort(e);
    }
    
    class march_forward
    {
        //vector <vector<int>> n1;
        //int nc;
    public:
        march_forward() { ; }
        void march_forward1 (vector <vector <int>> const & nz, vector <edge> e)
        {
            vector <vector<int>> n = const_cast <vector<vector<int>>&>(nz);
            int ec = e.size();
            int nc = n.size();
            for (int i = 0; i < nc; i++) if (n[i][0] > -1) n[i][0]++;                   //Can be modified accordingly.

            for (int i = 0; i < nc; i++)
            {
                if (n[i][0] == -1) continue;
                for (int j = 0; j < ec; j++)
                {
                    if (e[j].id1 == i)
                    {
                        if (n[e[j].id2 - 1][0] <= 0 && e[j].dist == n[i][0])
                        {
                            n[e[j].id2 - 1][0] = 0;
                            n[e[j].id2 - 1].push_back(i);
                        }
                    }

                    else if (e[j].id2 == i)
                    {
                        if (n[e[j].id1 - 1][0] <= 0 && e[j].dist == n[i][0])
                        {
                            n[e[j].id1 - 1][0] = 0;
                            n[e[j].id1 - 1].push_back(i);
                        }
                    }
                }
            }
            return;
        }
    };

    /*
    void march_forward(vector <vector <int>> const& nz, vector <edge> e)
    {
        vector <vector<int>> n = const_cast <vector<vector<int>>&>(nz);
        int ec = e.size();
        int nc = n.size();
        for (int i = 0; i < nc; i++) if (n[i][0] > -1) n[i][0]++;                   //Can be modified accordingly.

        for (int i = 0; i < nc; i++)
        {
            if (n[i][0] == -1) continue;
            for (int j = 0; j < ec; j++)
            {
                if (e[j].id1 == i)
                {
                    if (n[e[j].id2 - 1][0] <= 0 && e[j].dist == n[i][0])
                    {
                        n[e[j].id2 - 1][0] = 0;
                        n[e[j].id2 - 1].push_back(i);
                    }
                }

                else if (e[j].id2 == i)
                {
                    if (n[e[j].id1 - 1][0] <= 0 && e[j].dist == n[i][0])
                    {
                        n[e[j].id1 - 1][0] = 0;
                        n[e[j].id1 - 1].push_back(i);
                    }
                }
            }
        }
        return;
    }*/

    vector <vector<int>> operator () (int id1, int id2)
    {
        n1[id1 - 1][0] = n2[id2 - 1][0] = 0;
        march_forward dummy;

        while (!collide(n1, n2))                                             // write this bool fn
        {
            thread obj1(&march_forward::march_forward1,&dummy, std::ref(n2), e);
            dummy.march_forward1(n1,e);
            obj1.join();
        }

        vector <vector <int>> n;
        vector <int> vec;

        for (int i = 0; i < nc; i++)
        {
            vec = {};
            if (n1[i][0]!=-1)
            {
                for (int j = 1; j < n1[i].size(); j++) vec.push_back(n1[i][j]);
            }
            if (n2[i][0] != -1)
            {
                for (int j = 1; j < n2[i].size(); j++) vec.push_back(n2[i][j]);
            }
        }
        return(n);
    }

};

int main()
{
    int n;
    cin >> n;
    graph g1;
    for (int i = 0; i < n; i++) g1.add_node();
    cin >> n;
    for (int i = 0; i < n; i++) g1.add_edge();

    BFS bfs(g1);

    int id1, id2;
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        cout << "Enter source and sink id...";
        cin >> id1 >> id2;
        bfs(id1, id2);
    }
    return(0);
}

